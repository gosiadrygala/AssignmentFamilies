@page "/adults"
@using Models
@using Microsoft.AspNetCore.Http.Features
@using System.Runtime.CompilerServices
@using Microsoft.AspNetCore.Mvc.Filters
@using System.ComponentModel
@using System.IO
@inject InterfaceAdultsData AdultsData;
@inject NavigationManager NavigationManager;

<p>
    <input class="searchbar" placeholder="Search by name or surname" type="text" @oninput="@((arg) => Search(arg))"/>
</p>
<div class="adultspage">
    <div class="svgimg">
        <img src="Images/adultpage-svg.svg" alt="Adults">
        <div class="btn-x">
            @if (adult != null)
            {
                <button class="button-x" @onclick="(() => { adult = null; })">x</button>
            }
        </div>
        <div class="popup-box">
            @if (adult == null)
            {
            }
            else
            {
                <p>Name: @adult.FirstName</p>
                <p>Sex: @adult.Sex</p>
                <p>Height: @adult.Height</p>
                <p>Weight: @adult.Weight</p>
                <p>Eye color: @adult.EyeColor</p>
                <p>Hair color: @adult.HairColor</p>
            }
        </div>
    </div>
    <div class="adult-table">
        <thead>
        <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Age</th>
            <th>Job Title</th>
            <AuthorizeView Policy="MustBeAdministrator">
                <th>Salary</th>
            </AuthorizeView>
            <th>Details</th>
            <AuthorizeView Policy="MustBeAdministrator">
                <th>Remove</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>

        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.Age</td>
                <td>@item.JobTitle.JobTitle</td>
                <AuthorizeView Policy="MustBeAdministrator">
                    <td>@item.JobTitle.Salary</td>
                </AuthorizeView>
                <td>
                    <button class="button-adult" @onclick="(() => setValues(item.Id))">Show details</button>
                </td>
                <AuthorizeView Policy="MustBeAdministrator">
                    <td class="trashcolumn">
                        <div style="text-align: center;" >
                            <button class="remove-btn" @onclick="@(() => RemoveAnAdult(item.Id))">
                                <i class="oi oi-trash" style="color: #8fd3f1 "/>
                            </button></div>
                    </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>

    </div>
    <AuthorizeView Policy="MustBeAdministrator">
    <a class="addadult-link" href="/addadult"> + Add an adult </a>

    </AuthorizeView>
</div>


@code {

    private IList<Adult> adultsToShow = new List<Adult>();
    private IList<Adult> adults;
    private Adult adult;

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        adults = await AdultsData.GetAllAdults();
        adultsToShow = adults;
    }

    public void setValues(int idd)
    {
        adult = adults.First(a => a.Id == idd);
    }


    private void Search(ChangeEventArgs changeEventArgs)
    {
        string? searchByName = null;
        try
        {
            searchByName = changeEventArgs.Value.ToString().ToLower();
        }
        catch (Exception e)
        {
        }

        if (searchByName != null)
        {
            adultsToShow = adults.Where(adult => adult.FirstName.ToLowerInvariant().Contains(searchByName) || adult.LastName.ToLowerInvariant().Contains(searchByName)).ToList();
        }
        else
        {
            adultsToShow = adults;
        }
    }

    private void RemoveAnAdult(int itemId)
    {
        Adult adultToRemove = adultsToShow.First(adult => adult.Id == itemId);
        AdultsData.RemoveAnAdult(itemId);
        adultsToShow.Remove(adultToRemove);
    }

}